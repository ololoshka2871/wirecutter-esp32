/* automatically generated by rust-bindgen 0.69.4 */
/* bindgen -o lib/ESP-FlexyStepper/src/bindings.rs \
    --enable-cxx-namespaces \
    --respect-cxx-access-specs \
    --no-doc-comments \
    --no-layout-tests \
    --use-core lib/ESP-FlexyStepper/ESP-FlexyStepper-dist/src/ESP_FlexyStepper.h \
    -- \
    -I lib/ESP-FlexyStepper \
    -DESP32
    -x c++ \
    -std=c++17 \
    -I/usr/include/linux
*/
#![allow(
    non_upper_case_globals,
    non_camel_case_types,
    non_snake_case,
    improper_ctypes,
    dead_code
)]

pub type TaskHandle_t = *mut ::core::ffi::c_void;
pub type Task_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>;
pub type byte = u8;
pub type BaseType_t = u32;
pub type ulong = ::core::ffi::c_ulong;

pub const OUTPUT: u8 = 0x03;
pub const PULLUP: u8 = 0x04;
pub const INPUT_PULLUP: u8 = 0x05;
pub const PULLDOWN: u8 = 0x08;
pub const INPUT_PULLDOWN: u8 = 0x09;
pub const OPEN_DRAIN: u8 = 0x10;
pub const OUTPUT_OPEN_DRAIN: u8 = 0x13;
pub const ANALOG: u8 = 0xC0;

pub const HIGH: u8 = 1;
pub const LOW: u8 = 0;

pub type callbackFunction = ::core::option::Option<unsafe extern "C" fn()>;
pub type positionCallbackFunction =
    ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_long)>;

#[repr(C)]
#[derive(Debug)]
pub struct ESP_FlexyStepper {
    _homeReachedCallback: callbackFunction,
    _limitTriggeredCallback: callbackFunction,
    _emergencyStopTriggeredCallback: callbackFunction,
    _emergencyStopReleasedCallback: callbackFunction,
    _targetPositionReachedCallback: positionCallbackFunction,
    _callbackFunctionForGoToLimit: callbackFunction,

    stepPin: byte,
    brakePin: ::core::ffi::c_schar,
    enablePin: ::core::ffi::c_schar,
    brakePinActiveState: byte,
    enablePinActiveState: byte,
    _brakeEngageDelayMs: ::core::ffi::c_ulong,
    _brakeReleaseDelayMs: ::core::ffi::c_long,
    _timeToEngangeBrake: ::core::ffi::c_ulong,
    _timeToReleaseBrake: ::core::ffi::c_ulong,
    _isBrakeConfigured: bool,
    _isEnableConfigured: bool,
    _hasMovementOccuredSinceLastBrakeRelease: bool,
    directionPin: byte,
    _isBrakeActive: bool,
    _isDriverEnabled: bool,
    stepsPerMillimeter: f32,
    stepsPerRevolution: f32,
    directionOfMotion: ::core::ffi::c_int,
    currentPosition_InSteps: ::core::ffi::c_long,
    targetPosition_InSteps: ::core::ffi::c_long,
    desiredSpeed_InStepsPerSecond: f32,
    desiredPeriod_InUSPerStep: f32,
    acceleration_InStepsPerSecondPerSecond: f32,
    acceleration_InStepsPerUSPerUS: f32,
    deceleration_InStepsPerSecondPerSecond: f32,
    deceleration_InStepsPerUSPerUS: f32,
    periodOfSlowestStep_InUS: f32,
    minimumPeriodForAStoppedMotion: f32,
    nextStepPeriod_InUS: f32,
    lastStepTime_InUS: ::core::ffi::c_ulong,
    currentStepPeriod_InUS: f32,
    emergencyStopActive: bool,
    holdEmergencyStopUntilExplicitRelease: bool,
    directionTowardsHome: ::core::ffi::c_schar,
    lastStepDirectionBeforeLimitSwitchTrigger: ::core::ffi::c_schar,
    isCurrentlyHomed: bool,
    isOnWayToHome: bool,
    isOnWayToLimit: bool,
    firstProcessingAfterTargetReached: bool,
    activeLimitSwitch: ::core::ffi::c_schar,
    limitSwitchCheckPeformed: bool,
    disallowedDirection: ::core::ffi::c_schar,
    xHandle: TaskHandle_t,
}

extern "C" {
    /*
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper14startAsServiceEi"]
    pub fn ESP_FlexyStepper_startAsService(
        this: *mut ESP_FlexyStepper,
        coreNumber: ::core::ffi::c_int,
    ) -> bool;

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper11stopServiceEv"]
    pub fn ESP_FlexyStepper_stopService(this: *mut ESP_FlexyStepper);

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper18isStartedAsServiceEv"]
    pub fn ESP_FlexyStepper_isStartedAsService(this: *mut ESP_FlexyStepper) -> bool;
    */

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper13connectToPinsEhhb"]
    pub fn ESP_FlexyStepper_connectToPins(
        this: *mut ESP_FlexyStepper,
        stepPinNumber: byte,
        directionPinNumber: byte,
        useOpenDrain: bool,
    );

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper11setBrakePinEah"]
    pub fn ESP_FlexyStepper_setBrakePin(
        this: *mut ESP_FlexyStepper,
        brakePin: ::core::ffi::c_schar,
        activeState: byte,
    );

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper12setEnablePinEah"]
    pub fn ESP_FlexyStepper_setEnablePin(
        this: *mut ESP_FlexyStepper,
        enablePin: ::core::ffi::c_schar,
        activeState: byte,
    );

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper25getTaskStackHighWaterMarkEv"]
    pub fn ESP_FlexyStepper_getTaskStackHighWaterMark(
        this: *mut ESP_FlexyStepper,
    ) -> ::core::ffi::c_long;

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper22clearLimitSwitchActiveEv"]
    pub fn ESP_FlexyStepper_clearLimitSwitchActive(this: *mut ESP_FlexyStepper);

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper14motionCompleteEv"]
    pub fn ESP_FlexyStepper_motionComplete(this: *mut ESP_FlexyStepper) -> bool;

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper20getDirectionOfMotionEv"]
    pub fn ESP_FlexyStepper_getDirectionOfMotion(this: *mut ESP_FlexyStepper)
        -> ::core::ffi::c_int;

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper19isMovingTowardsHomeEv"]
    pub fn ESP_FlexyStepper_isMovingTowardsHome(this: *mut ESP_FlexyStepper) -> bool;

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper13emergencyStopEb"]
    pub fn ESP_FlexyStepper_emergencyStop(this: *mut ESP_FlexyStepper, holdUntilReleased: bool);

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper20releaseEmergencyStopEv"]
    pub fn ESP_FlexyStepper_releaseEmergencyStop(this: *mut ESP_FlexyStepper);

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper13activateBrakeEv"]
    pub fn ESP_FlexyStepper_activateBrake(this: *mut ESP_FlexyStepper);

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper15deactivateBrakeEv"]
    pub fn ESP_FlexyStepper_deactivateBrake(this: *mut ESP_FlexyStepper);

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper13isBrakeActiveEv"]
    pub fn ESP_FlexyStepper_isBrakeActive(this: *mut ESP_FlexyStepper) -> bool;

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper12enableDriverEv"]
    pub fn ESP_FlexyStepper_enableDriver(this: *mut ESP_FlexyStepper);

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper13disableDriverEv"]
    pub fn ESP_FlexyStepper_disableDriver(this: *mut ESP_FlexyStepper);

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper15isDriverEnabledEv"]
    pub fn ESP_FlexyStepper_isDriverEnabled(this: *mut ESP_FlexyStepper) -> bool;

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper15processMovementEv"]
    pub fn ESP_FlexyStepper_processMovement(this: *mut ESP_FlexyStepper) -> bool;

    #[link_name = "\u{1}_ZN16ESP_FlexyStepper27registerHomeReachedCallbackEPFvvE"]
    pub fn ESP_FlexyStepper_registerHomeReachedCallback(
        this: *mut ESP_FlexyStepper,
        homeReachedCallbackFunction: callbackFunction,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper28registerLimitReachedCallbackEPFvvE"]
    pub fn ESP_FlexyStepper_registerLimitReachedCallback(
        this: *mut ESP_FlexyStepper,
        limitSwitchTriggerdCallbackFunction: callbackFunction,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper37registerTargetPositionReachedCallbackEPFvlE"]
    pub fn ESP_FlexyStepper_registerTargetPositionReachedCallback(
        this: *mut ESP_FlexyStepper,
        targetPositionReachedCallbackFunction: positionCallbackFunction,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper38registerEmergencyStopTriggeredCallbackEPFvvE"]
    pub fn ESP_FlexyStepper_registerEmergencyStopTriggeredCallback(
        this: *mut ESP_FlexyStepper,
        emergencyStopTriggerdCallbackFunction: callbackFunction,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper37registerEmergencyStopReleasedCallbackEPFvvE"]
    pub fn ESP_FlexyStepper_registerEmergencyStopReleasedCallback(
        this: *mut ESP_FlexyStepper,
        emergencyStopReleasedCallbackFunction: callbackFunction,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper21setStepsPerMillimeterEf"]
    pub fn ESP_FlexyStepper_setStepsPerMillimeter(
        this: *mut ESP_FlexyStepper,
        motorStepPerMillimeter: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper21setStepsPerRevolutionEf"]
    pub fn ESP_FlexyStepper_setStepsPerRevolution(
        this: *mut ESP_FlexyStepper,
        motorStepPerRevolution: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper24setSpeedInStepsPerSecondEf"]
    pub fn ESP_FlexyStepper_setSpeedInStepsPerSecond(
        this: *mut ESP_FlexyStepper,
        speedInStepsPerSecond: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper30setSpeedInMillimetersPerSecondEf"]
    pub fn ESP_FlexyStepper_setSpeedInMillimetersPerSecond(
        this: *mut ESP_FlexyStepper,
        speedInMillimetersPerSecond: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper30setSpeedInRevolutionsPerSecondEf"]
    pub fn ESP_FlexyStepper_setSpeedInRevolutionsPerSecond(
        this: *mut ESP_FlexyStepper,
        speedInRevolutionsPerSecond: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper46setAccelerationInMillimetersPerSecondPerSecondEf"]
    pub fn ESP_FlexyStepper_setAccelerationInMillimetersPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
        accelerationInMillimetersPerSecondPerSecond: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper46setAccelerationInRevolutionsPerSecondPerSecondEf"]
    pub fn ESP_FlexyStepper_setAccelerationInRevolutionsPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
        accelerationInRevolutionsPerSecondPerSecond: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper46setDecelerationInMillimetersPerSecondPerSecondEf"]
    pub fn ESP_FlexyStepper_setDecelerationInMillimetersPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
        decelerationInMillimetersPerSecondPerSecond: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper46setDecelerationInRevolutionsPerSecondPerSecondEf"]
    pub fn ESP_FlexyStepper_setDecelerationInRevolutionsPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
        decelerationInRevolutionsPerSecondPerSecond: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper40setAccelerationInStepsPerSecondPerSecondEf"]
    pub fn ESP_FlexyStepper_setAccelerationInStepsPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
        accelerationInStepsPerSecondPerSecond: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper40setDecelerationInStepsPerSecondPerSecondEf"]
    pub fn ESP_FlexyStepper_setDecelerationInStepsPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
        decelerationInStepsPerSecondPerSecond: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper18setDirectionToHomeEa"]
    pub fn ESP_FlexyStepper_setDirectionToHome(
        this: *mut ESP_FlexyStepper,
        directionTowardHome: ::core::ffi::c_schar,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper20setLimitSwitchActiveEa"]
    pub fn ESP_FlexyStepper_setLimitSwitchActive(
        this: *mut ESP_FlexyStepper,
        limitSwitchType: ::core::ffi::c_schar,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper21setBrakeEngageDelayMsEm"]
    pub fn ESP_FlexyStepper_setBrakeEngageDelayMs(
        this: *mut ESP_FlexyStepper,
        arg1: ::core::ffi::c_ulong,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper22setBrakeReleaseDelayMsEl"]
    pub fn ESP_FlexyStepper_setBrakeReleaseDelayMs(
        this: *mut ESP_FlexyStepper,
        arg1: ::core::ffi::c_long,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper34getCurrentVelocityInStepsPerSecondEv"]
    pub fn ESP_FlexyStepper_getCurrentVelocityInStepsPerSecond(this: *mut ESP_FlexyStepper) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper40getCurrentVelocityInRevolutionsPerSecondEv"]
    pub fn ESP_FlexyStepper_getCurrentVelocityInRevolutionsPerSecond(
        this: *mut ESP_FlexyStepper,
    ) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper40getCurrentVelocityInMillimetersPerSecondEv"]
    pub fn ESP_FlexyStepper_getCurrentVelocityInMillimetersPerSecond(
        this: *mut ESP_FlexyStepper,
    ) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper50getConfiguredAccelerationInStepsPerSecondPerSecondEv"]
    pub fn ESP_FlexyStepper_getConfiguredAccelerationInStepsPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
    ) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper56getConfiguredAccelerationInRevolutionsPerSecondPerSecondEv"]
    pub fn ESP_FlexyStepper_getConfiguredAccelerationInRevolutionsPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
    ) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper56getConfiguredAccelerationInMillimetersPerSecondPerSecondEv"]
    pub fn ESP_FlexyStepper_getConfiguredAccelerationInMillimetersPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
    ) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper50getConfiguredDecelerationInStepsPerSecondPerSecondEv"]
    pub fn ESP_FlexyStepper_getConfiguredDecelerationInStepsPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
    ) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper56getConfiguredDecelerationInRevolutionsPerSecondPerSecondEv"]
    pub fn ESP_FlexyStepper_getConfiguredDecelerationInRevolutionsPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
    ) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper56getConfiguredDecelerationInMillimetersPerSecondPerSecondEv"]
    pub fn ESP_FlexyStepper_getConfiguredDecelerationInMillimetersPerSecondPerSecond(
        this: *mut ESP_FlexyStepper,
    ) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper25setCurrentPositionInStepsEl"]
    pub fn ESP_FlexyStepper_setCurrentPositionInSteps(
        this: *mut ESP_FlexyStepper,
        currentPositionInSteps: ::core::ffi::c_long,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper31setCurrentPositionInMillimetersEf"]
    pub fn ESP_FlexyStepper_setCurrentPositionInMillimeters(
        this: *mut ESP_FlexyStepper,
        currentPositionInMillimeters: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper31setCurrentPositionInRevolutionsEf"]
    pub fn ESP_FlexyStepper_setCurrentPositionInRevolutions(
        this: *mut ESP_FlexyStepper,
        currentPositionInRevolutions: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper25getCurrentPositionInStepsEv"]
    pub fn ESP_FlexyStepper_getCurrentPositionInSteps(
        this: *mut ESP_FlexyStepper,
    ) -> ::core::ffi::c_long;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper31getCurrentPositionInRevolutionsEv"]
    pub fn ESP_FlexyStepper_getCurrentPositionInRevolutions(this: *mut ESP_FlexyStepper) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper31getCurrentPositionInMillimetersEv"]
    pub fn ESP_FlexyStepper_getCurrentPositionInMillimeters(this: *mut ESP_FlexyStepper) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper12startJoggingEa"]
    pub fn ESP_FlexyStepper_startJogging(
        this: *mut ESP_FlexyStepper,
        direction: ::core::ffi::c_schar,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper11stopJoggingEv"]
    pub fn ESP_FlexyStepper_stopJogging(this: *mut ESP_FlexyStepper);
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper21goToLimitAndSetAsHomeEPFvvEl"]
    pub fn ESP_FlexyStepper_goToLimitAndSetAsHome(
        this: *mut ESP_FlexyStepper,
        callbackFunctionForHome: callbackFunction,
        maxDistanceToMoveInSteps: ::core::ffi::c_long,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper9goToLimitEaPFvvE"]
    pub fn ESP_FlexyStepper_goToLimit(
        this: *mut ESP_FlexyStepper,
        direction: ::core::ffi::c_schar,
        callbackFunctionForLimit: callbackFunction,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper31setCurrentPositionAsHomeAndStopEv"]
    pub fn ESP_FlexyStepper_setCurrentPositionAsHomeAndStop(this: *mut ESP_FlexyStepper);
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper23setTargetPositionToStopEv"]
    pub fn ESP_FlexyStepper_setTargetPositionToStop(this: *mut ESP_FlexyStepper);
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper25getDistanceToTargetSignedEv"]
    pub fn ESP_FlexyStepper_getDistanceToTargetSigned(
        this: *mut ESP_FlexyStepper,
    ) -> ::core::ffi::c_long;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper24setTargetPositionInStepsEl"]
    pub fn ESP_FlexyStepper_setTargetPositionInSteps(
        this: *mut ESP_FlexyStepper,
        absolutePositionToMoveToInSteps: ::core::ffi::c_long,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper30setTargetPositionInMillimetersEf"]
    pub fn ESP_FlexyStepper_setTargetPositionInMillimeters(
        this: *mut ESP_FlexyStepper,
        absolutePositionToMoveToInMillimeters: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper30setTargetPositionInRevolutionsEf"]
    pub fn ESP_FlexyStepper_setTargetPositionInRevolutions(
        this: *mut ESP_FlexyStepper,
        absolutePositionToMoveToInRevolutions: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper32setTargetPositionRelativeInStepsEl"]
    pub fn ESP_FlexyStepper_setTargetPositionRelativeInSteps(
        this: *mut ESP_FlexyStepper,
        distanceToMoveInSteps: ::core::ffi::c_long,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper38setTargetPositionRelativeInMillimetersEf"]
    pub fn ESP_FlexyStepper_setTargetPositionRelativeInMillimeters(
        this: *mut ESP_FlexyStepper,
        distanceToMoveInMillimeters: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper38setTargetPositionRelativeInRevolutionsEf"]
    pub fn ESP_FlexyStepper_setTargetPositionRelativeInRevolutions(
        this: *mut ESP_FlexyStepper,
        distanceToMoveInRevolutions: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper24getTargetPositionInStepsEv"]
    pub fn ESP_FlexyStepper_getTargetPositionInSteps(
        this: *mut ESP_FlexyStepper,
    ) -> ::core::ffi::c_long;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper30getTargetPositionInMillimetersEv"]
    pub fn ESP_FlexyStepper_getTargetPositionInMillimeters(this: *mut ESP_FlexyStepper) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper30getTargetPositionInRevolutionsEv"]
    pub fn ESP_FlexyStepper_getTargetPositionInRevolutions(this: *mut ESP_FlexyStepper) -> f32;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper21moveToPositionInStepsEl"]
    pub fn ESP_FlexyStepper_moveToPositionInSteps(
        this: *mut ESP_FlexyStepper,
        absolutePositionToMoveToInSteps: ::core::ffi::c_long,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper27moveToPositionInMillimetersEf"]
    pub fn ESP_FlexyStepper_moveToPositionInMillimeters(
        this: *mut ESP_FlexyStepper,
        absolutePositionToMoveToInMillimeters: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper27moveToPositionInRevolutionsEf"]
    pub fn ESP_FlexyStepper_moveToPositionInRevolutions(
        this: *mut ESP_FlexyStepper,
        absolutePositionToMoveToInRevolutions: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper19moveRelativeInStepsEl"]
    pub fn ESP_FlexyStepper_moveRelativeInSteps(
        this: *mut ESP_FlexyStepper,
        distanceToMoveInSteps: ::core::ffi::c_long,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper25moveRelativeInMillimetersEf"]
    pub fn ESP_FlexyStepper_moveRelativeInMillimeters(
        this: *mut ESP_FlexyStepper,
        distanceToMoveInMillimeters: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper25moveRelativeInRevolutionsEf"]
    pub fn ESP_FlexyStepper_moveRelativeInRevolutions(
        this: *mut ESP_FlexyStepper,
        distanceToMoveInRevolutions: f32,
    );
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper17moveToHomeInStepsEafli"]
    pub fn ESP_FlexyStepper_moveToHomeInSteps(
        this: *mut ESP_FlexyStepper,
        directionTowardHome: ::core::ffi::c_schar,
        speedInStepsPerSecond: f32,
        maxDistanceToMoveInSteps: ::core::ffi::c_long,
        homeSwitchPin: ::core::ffi::c_int,
    ) -> bool;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper23moveToHomeInMillimetersEafli"]
    pub fn ESP_FlexyStepper_moveToHomeInMillimeters(
        this: *mut ESP_FlexyStepper,
        directionTowardHome: ::core::ffi::c_schar,
        speedInMillimetersPerSecond: f32,
        maxDistanceToMoveInMillimeters: ::core::ffi::c_long,
        homeLimitSwitchPin: ::core::ffi::c_int,
    ) -> bool;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepper23moveToHomeInRevolutionsEafli"]
    pub fn ESP_FlexyStepper_moveToHomeInRevolutions(
        this: *mut ESP_FlexyStepper,
        directionTowardHome: ::core::ffi::c_schar,
        speedInRevolutionsPerSecond: f32,
        maxDistanceToMoveInRevolutions: ::core::ffi::c_long,
        homeLimitSwitchPin: ::core::ffi::c_int,
    ) -> bool;
    #[link_name = "\u{1}_ZN16ESP_FlexyStepperC1Ev"]
    pub fn ESP_FlexyStepper_ESP_FlexyStepper(this: *mut ESP_FlexyStepper);
    #[link_name = "\u{1}_ZN16ESP_FlexyStepperD1Ev"]
    pub fn ESP_FlexyStepper_ESP_FlexyStepper_destructor(this: *mut ESP_FlexyStepper);
}
impl ESP_FlexyStepper {
    /*
    #[inline]
    pub unsafe fn startAsService(&mut self, coreNumber: ::core::ffi::c_int) -> bool {
        ESP_FlexyStepper_startAsService(self, coreNumber)
    }
    #[inline]
    pub unsafe fn stopService(&mut self) {
        ESP_FlexyStepper_stopService(self)
    }
    #[inline]
    pub unsafe fn isStartedAsService(&mut self) -> bool {
        ESP_FlexyStepper_isStartedAsService(self)
    }
    */
    #[inline]
    pub unsafe fn connectToPins(
        &mut self,
        stepPinNumber: byte,
        directionPinNumber: byte,
        useOpenDrain: bool,
    ) {
        ESP_FlexyStepper_connectToPins(self, stepPinNumber, directionPinNumber, useOpenDrain)
    }
    #[inline]
    pub unsafe fn setBrakePin(&mut self, brakePin: ::core::ffi::c_schar, activeState: byte) {
        ESP_FlexyStepper_setBrakePin(self, brakePin, activeState)
    }
    #[inline]
    pub unsafe fn setEnablePin(&mut self, enablePin: ::core::ffi::c_schar, activeState: byte) {
        ESP_FlexyStepper_setEnablePin(self, enablePin, activeState)
    }
    #[inline]
    pub unsafe fn getTaskStackHighWaterMark(&mut self) -> ::core::ffi::c_long {
        ESP_FlexyStepper_getTaskStackHighWaterMark(self)
    }
    #[inline]
    pub unsafe fn clearLimitSwitchActive(&mut self) {
        ESP_FlexyStepper_clearLimitSwitchActive(self)
    }
    #[inline]
    pub unsafe fn motionComplete(&mut self) -> bool {
        ESP_FlexyStepper_motionComplete(self)
    }
    #[inline]
    pub unsafe fn getDirectionOfMotion(&mut self) -> ::core::ffi::c_int {
        ESP_FlexyStepper_getDirectionOfMotion(self)
    }
    #[inline]
    pub unsafe fn isMovingTowardsHome(&mut self) -> bool {
        ESP_FlexyStepper_isMovingTowardsHome(self)
    }
    #[inline]
    pub unsafe fn emergencyStop(&mut self, holdUntilReleased: bool) {
        ESP_FlexyStepper_emergencyStop(self, holdUntilReleased)
    }
    #[inline]
    pub unsafe fn releaseEmergencyStop(&mut self) {
        ESP_FlexyStepper_releaseEmergencyStop(self)
    }
    #[inline]
    pub unsafe fn activateBrake(&mut self) {
        ESP_FlexyStepper_activateBrake(self)
    }
    #[inline]
    pub unsafe fn deactivateBrake(&mut self) {
        ESP_FlexyStepper_deactivateBrake(self)
    }
    #[inline]
    pub unsafe fn isBrakeActive(&mut self) -> bool {
        ESP_FlexyStepper_isBrakeActive(self)
    }
    #[inline]
    pub unsafe fn enableDriver(&mut self) {
        ESP_FlexyStepper_enableDriver(self)
    }
    #[inline]
    pub unsafe fn disableDriver(&mut self) {
        ESP_FlexyStepper_disableDriver(self)
    }
    #[inline]
    pub unsafe fn isDriverEnabled(&mut self) -> bool {
        ESP_FlexyStepper_isDriverEnabled(self)
    }
    #[inline]
    pub unsafe fn processMovement(&mut self) -> bool {
        ESP_FlexyStepper_processMovement(self)
    }
    #[inline]
    pub unsafe fn registerHomeReachedCallback(
        &mut self,
        homeReachedCallbackFunction: callbackFunction,
    ) {
        ESP_FlexyStepper_registerHomeReachedCallback(self, homeReachedCallbackFunction)
    }
    #[inline]
    pub unsafe fn registerLimitReachedCallback(
        &mut self,
        limitSwitchTriggerdCallbackFunction: callbackFunction,
    ) {
        ESP_FlexyStepper_registerLimitReachedCallback(self, limitSwitchTriggerdCallbackFunction)
    }
    #[inline]
    pub unsafe fn registerTargetPositionReachedCallback(
        &mut self,
        targetPositionReachedCallbackFunction: positionCallbackFunction,
    ) {
        ESP_FlexyStepper_registerTargetPositionReachedCallback(
            self,
            targetPositionReachedCallbackFunction,
        )
    }
    #[inline]
    pub unsafe fn registerEmergencyStopTriggeredCallback(
        &mut self,
        emergencyStopTriggerdCallbackFunction: callbackFunction,
    ) {
        ESP_FlexyStepper_registerEmergencyStopTriggeredCallback(
            self,
            emergencyStopTriggerdCallbackFunction,
        )
    }
    #[inline]
    pub unsafe fn registerEmergencyStopReleasedCallback(
        &mut self,
        emergencyStopReleasedCallbackFunction: callbackFunction,
    ) {
        ESP_FlexyStepper_registerEmergencyStopReleasedCallback(
            self,
            emergencyStopReleasedCallbackFunction,
        )
    }
    #[inline]
    pub unsafe fn setStepsPerMillimeter(&mut self, motorStepPerMillimeter: f32) {
        ESP_FlexyStepper_setStepsPerMillimeter(self, motorStepPerMillimeter)
    }
    #[inline]
    pub unsafe fn setStepsPerRevolution(&mut self, motorStepPerRevolution: f32) {
        ESP_FlexyStepper_setStepsPerRevolution(self, motorStepPerRevolution)
    }
    #[inline]
    pub unsafe fn setSpeedInStepsPerSecond(&mut self, speedInStepsPerSecond: f32) {
        ESP_FlexyStepper_setSpeedInStepsPerSecond(self, speedInStepsPerSecond)
    }
    #[inline]
    pub unsafe fn setSpeedInMillimetersPerSecond(&mut self, speedInMillimetersPerSecond: f32) {
        ESP_FlexyStepper_setSpeedInMillimetersPerSecond(self, speedInMillimetersPerSecond)
    }
    #[inline]
    pub unsafe fn setSpeedInRevolutionsPerSecond(&mut self, speedInRevolutionsPerSecond: f32) {
        ESP_FlexyStepper_setSpeedInRevolutionsPerSecond(self, speedInRevolutionsPerSecond)
    }
    #[inline]
    pub unsafe fn setAccelerationInMillimetersPerSecondPerSecond(
        &mut self,
        accelerationInMillimetersPerSecondPerSecond: f32,
    ) {
        ESP_FlexyStepper_setAccelerationInMillimetersPerSecondPerSecond(
            self,
            accelerationInMillimetersPerSecondPerSecond,
        )
    }
    #[inline]
    pub unsafe fn setAccelerationInRevolutionsPerSecondPerSecond(
        &mut self,
        accelerationInRevolutionsPerSecondPerSecond: f32,
    ) {
        ESP_FlexyStepper_setAccelerationInRevolutionsPerSecondPerSecond(
            self,
            accelerationInRevolutionsPerSecondPerSecond,
        )
    }
    #[inline]
    pub unsafe fn setDecelerationInMillimetersPerSecondPerSecond(
        &mut self,
        decelerationInMillimetersPerSecondPerSecond: f32,
    ) {
        ESP_FlexyStepper_setDecelerationInMillimetersPerSecondPerSecond(
            self,
            decelerationInMillimetersPerSecondPerSecond,
        )
    }
    #[inline]
    pub unsafe fn setDecelerationInRevolutionsPerSecondPerSecond(
        &mut self,
        decelerationInRevolutionsPerSecondPerSecond: f32,
    ) {
        ESP_FlexyStepper_setDecelerationInRevolutionsPerSecondPerSecond(
            self,
            decelerationInRevolutionsPerSecondPerSecond,
        )
    }
    #[inline]
    pub unsafe fn setAccelerationInStepsPerSecondPerSecond(
        &mut self,
        accelerationInStepsPerSecondPerSecond: f32,
    ) {
        ESP_FlexyStepper_setAccelerationInStepsPerSecondPerSecond(
            self,
            accelerationInStepsPerSecondPerSecond,
        )
    }
    #[inline]
    pub unsafe fn setDecelerationInStepsPerSecondPerSecond(
        &mut self,
        decelerationInStepsPerSecondPerSecond: f32,
    ) {
        ESP_FlexyStepper_setDecelerationInStepsPerSecondPerSecond(
            self,
            decelerationInStepsPerSecondPerSecond,
        )
    }
    #[inline]
    pub unsafe fn setDirectionToHome(&mut self, directionTowardHome: ::core::ffi::c_schar) {
        ESP_FlexyStepper_setDirectionToHome(self, directionTowardHome)
    }
    #[inline]
    pub unsafe fn setLimitSwitchActive(&mut self, limitSwitchType: ::core::ffi::c_schar) {
        ESP_FlexyStepper_setLimitSwitchActive(self, limitSwitchType)
    }
    #[inline]
    pub unsafe fn setBrakeEngageDelayMs(&mut self, arg1: ::core::ffi::c_ulong) {
        ESP_FlexyStepper_setBrakeEngageDelayMs(self, arg1)
    }
    #[inline]
    pub unsafe fn setBrakeReleaseDelayMs(&mut self, arg1: ::core::ffi::c_long) {
        ESP_FlexyStepper_setBrakeReleaseDelayMs(self, arg1)
    }
    #[inline]
    pub unsafe fn getCurrentVelocityInStepsPerSecond(&mut self) -> f32 {
        ESP_FlexyStepper_getCurrentVelocityInStepsPerSecond(self)
    }
    #[inline]
    pub unsafe fn getCurrentVelocityInRevolutionsPerSecond(&mut self) -> f32 {
        ESP_FlexyStepper_getCurrentVelocityInRevolutionsPerSecond(self)
    }
    #[inline]
    pub unsafe fn getCurrentVelocityInMillimetersPerSecond(&mut self) -> f32 {
        ESP_FlexyStepper_getCurrentVelocityInMillimetersPerSecond(self)
    }
    #[inline]
    pub unsafe fn getConfiguredAccelerationInStepsPerSecondPerSecond(&mut self) -> f32 {
        ESP_FlexyStepper_getConfiguredAccelerationInStepsPerSecondPerSecond(self)
    }
    #[inline]
    pub unsafe fn getConfiguredAccelerationInRevolutionsPerSecondPerSecond(&mut self) -> f32 {
        ESP_FlexyStepper_getConfiguredAccelerationInRevolutionsPerSecondPerSecond(self)
    }
    #[inline]
    pub unsafe fn getConfiguredAccelerationInMillimetersPerSecondPerSecond(&mut self) -> f32 {
        ESP_FlexyStepper_getConfiguredAccelerationInMillimetersPerSecondPerSecond(self)
    }
    #[inline]
    pub unsafe fn getConfiguredDecelerationInStepsPerSecondPerSecond(&mut self) -> f32 {
        ESP_FlexyStepper_getConfiguredDecelerationInStepsPerSecondPerSecond(self)
    }
    #[inline]
    pub unsafe fn getConfiguredDecelerationInRevolutionsPerSecondPerSecond(&mut self) -> f32 {
        ESP_FlexyStepper_getConfiguredDecelerationInRevolutionsPerSecondPerSecond(self)
    }
    #[inline]
    pub unsafe fn getConfiguredDecelerationInMillimetersPerSecondPerSecond(&mut self) -> f32 {
        ESP_FlexyStepper_getConfiguredDecelerationInMillimetersPerSecondPerSecond(self)
    }
    #[inline]
    pub unsafe fn setCurrentPositionInSteps(
        &mut self,
        currentPositionInSteps: ::core::ffi::c_long,
    ) {
        ESP_FlexyStepper_setCurrentPositionInSteps(self, currentPositionInSteps)
    }
    #[inline]
    pub unsafe fn setCurrentPositionInMillimeters(&mut self, currentPositionInMillimeters: f32) {
        ESP_FlexyStepper_setCurrentPositionInMillimeters(self, currentPositionInMillimeters)
    }
    #[inline]
    pub unsafe fn setCurrentPositionInRevolutions(&mut self, currentPositionInRevolutions: f32) {
        ESP_FlexyStepper_setCurrentPositionInRevolutions(self, currentPositionInRevolutions)
    }
    #[inline]
    pub unsafe fn getCurrentPositionInSteps(&mut self) -> ::core::ffi::c_long {
        ESP_FlexyStepper_getCurrentPositionInSteps(self)
    }
    #[inline]
    pub unsafe fn getCurrentPositionInRevolutions(&mut self) -> f32 {
        ESP_FlexyStepper_getCurrentPositionInRevolutions(self)
    }
    #[inline]
    pub unsafe fn getCurrentPositionInMillimeters(&mut self) -> f32 {
        ESP_FlexyStepper_getCurrentPositionInMillimeters(self)
    }
    #[inline]
    pub unsafe fn startJogging(&mut self, direction: ::core::ffi::c_schar) {
        ESP_FlexyStepper_startJogging(self, direction)
    }
    #[inline]
    pub unsafe fn stopJogging(&mut self) {
        ESP_FlexyStepper_stopJogging(self)
    }
    #[inline]
    pub unsafe fn goToLimitAndSetAsHome(
        &mut self,
        callbackFunctionForHome: callbackFunction,
        maxDistanceToMoveInSteps: ::core::ffi::c_long,
    ) {
        ESP_FlexyStepper_goToLimitAndSetAsHome(
            self,
            callbackFunctionForHome,
            maxDistanceToMoveInSteps,
        )
    }
    #[inline]
    pub unsafe fn goToLimit(
        &mut self,
        direction: ::core::ffi::c_schar,
        callbackFunctionForLimit: callbackFunction,
    ) {
        ESP_FlexyStepper_goToLimit(self, direction, callbackFunctionForLimit)
    }
    #[inline]
    pub unsafe fn setCurrentPositionAsHomeAndStop(&mut self) {
        ESP_FlexyStepper_setCurrentPositionAsHomeAndStop(self)
    }
    #[inline]
    pub unsafe fn setTargetPositionToStop(&mut self) {
        ESP_FlexyStepper_setTargetPositionToStop(self)
    }
    #[inline]
    pub unsafe fn getDistanceToTargetSigned(&mut self) -> ::core::ffi::c_long {
        ESP_FlexyStepper_getDistanceToTargetSigned(self)
    }
    #[inline]
    pub unsafe fn setTargetPositionInSteps(
        &mut self,
        absolutePositionToMoveToInSteps: ::core::ffi::c_long,
    ) {
        ESP_FlexyStepper_setTargetPositionInSteps(self, absolutePositionToMoveToInSteps)
    }
    #[inline]
    pub unsafe fn setTargetPositionInMillimeters(
        &mut self,
        absolutePositionToMoveToInMillimeters: f32,
    ) {
        ESP_FlexyStepper_setTargetPositionInMillimeters(self, absolutePositionToMoveToInMillimeters)
    }
    #[inline]
    pub unsafe fn setTargetPositionInRevolutions(
        &mut self,
        absolutePositionToMoveToInRevolutions: f32,
    ) {
        ESP_FlexyStepper_setTargetPositionInRevolutions(self, absolutePositionToMoveToInRevolutions)
    }
    #[inline]
    pub unsafe fn setTargetPositionRelativeInSteps(
        &mut self,
        distanceToMoveInSteps: ::core::ffi::c_long,
    ) {
        ESP_FlexyStepper_setTargetPositionRelativeInSteps(self, distanceToMoveInSteps)
    }
    #[inline]
    pub unsafe fn setTargetPositionRelativeInMillimeters(
        &mut self,
        distanceToMoveInMillimeters: f32,
    ) {
        ESP_FlexyStepper_setTargetPositionRelativeInMillimeters(self, distanceToMoveInMillimeters)
    }
    #[inline]
    pub unsafe fn setTargetPositionRelativeInRevolutions(
        &mut self,
        distanceToMoveInRevolutions: f32,
    ) {
        ESP_FlexyStepper_setTargetPositionRelativeInRevolutions(self, distanceToMoveInRevolutions)
    }
    #[inline]
    pub unsafe fn getTargetPositionInSteps(&mut self) -> ::core::ffi::c_long {
        ESP_FlexyStepper_getTargetPositionInSteps(self)
    }
    #[inline]
    pub unsafe fn getTargetPositionInMillimeters(&mut self) -> f32 {
        ESP_FlexyStepper_getTargetPositionInMillimeters(self)
    }
    #[inline]
    pub unsafe fn getTargetPositionInRevolutions(&mut self) -> f32 {
        ESP_FlexyStepper_getTargetPositionInRevolutions(self)
    }
    #[inline]
    pub unsafe fn moveToPositionInSteps(
        &mut self,
        absolutePositionToMoveToInSteps: ::core::ffi::c_long,
    ) {
        ESP_FlexyStepper_moveToPositionInSteps(self, absolutePositionToMoveToInSteps)
    }
    #[inline]
    pub unsafe fn moveToPositionInMillimeters(
        &mut self,
        absolutePositionToMoveToInMillimeters: f32,
    ) {
        ESP_FlexyStepper_moveToPositionInMillimeters(self, absolutePositionToMoveToInMillimeters)
    }
    #[inline]
    pub unsafe fn moveToPositionInRevolutions(
        &mut self,
        absolutePositionToMoveToInRevolutions: f32,
    ) {
        ESP_FlexyStepper_moveToPositionInRevolutions(self, absolutePositionToMoveToInRevolutions)
    }
    #[inline]
    pub unsafe fn moveRelativeInSteps(&mut self, distanceToMoveInSteps: ::core::ffi::c_long) {
        ESP_FlexyStepper_moveRelativeInSteps(self, distanceToMoveInSteps)
    }
    #[inline]
    pub unsafe fn moveRelativeInMillimeters(&mut self, distanceToMoveInMillimeters: f32) {
        ESP_FlexyStepper_moveRelativeInMillimeters(self, distanceToMoveInMillimeters)
    }
    #[inline]
    pub unsafe fn moveRelativeInRevolutions(&mut self, distanceToMoveInRevolutions: f32) {
        ESP_FlexyStepper_moveRelativeInRevolutions(self, distanceToMoveInRevolutions)
    }
    #[inline]
    pub unsafe fn moveToHomeInSteps(
        &mut self,
        directionTowardHome: ::core::ffi::c_schar,
        speedInStepsPerSecond: f32,
        maxDistanceToMoveInSteps: ::core::ffi::c_long,
        homeSwitchPin: ::core::ffi::c_int,
    ) -> bool {
        ESP_FlexyStepper_moveToHomeInSteps(
            self,
            directionTowardHome,
            speedInStepsPerSecond,
            maxDistanceToMoveInSteps,
            homeSwitchPin,
        )
    }
    #[inline]
    pub unsafe fn moveToHomeInMillimeters(
        &mut self,
        directionTowardHome: ::core::ffi::c_schar,
        speedInMillimetersPerSecond: f32,
        maxDistanceToMoveInMillimeters: ::core::ffi::c_long,
        homeLimitSwitchPin: ::core::ffi::c_int,
    ) -> bool {
        ESP_FlexyStepper_moveToHomeInMillimeters(
            self,
            directionTowardHome,
            speedInMillimetersPerSecond,
            maxDistanceToMoveInMillimeters,
            homeLimitSwitchPin,
        )
    }
    #[inline]
    pub unsafe fn moveToHomeInRevolutions(
        &mut self,
        directionTowardHome: ::core::ffi::c_schar,
        speedInRevolutionsPerSecond: f32,
        maxDistanceToMoveInRevolutions: ::core::ffi::c_long,
        homeLimitSwitchPin: ::core::ffi::c_int,
    ) -> bool {
        ESP_FlexyStepper_moveToHomeInRevolutions(
            self,
            directionTowardHome,
            speedInRevolutionsPerSecond,
            maxDistanceToMoveInRevolutions,
            homeLimitSwitchPin,
        )
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        ESP_FlexyStepper_ESP_FlexyStepper(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ESP_FlexyStepper_ESP_FlexyStepper_destructor(self)
    }
}

unsafe impl Send for ESP_FlexyStepper {}
